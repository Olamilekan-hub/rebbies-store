const dotenv = require("dotenv");

let ENV_FILE_NAME = "";
switch (process.env.NODE_ENV) {
  case "production":
    ENV_FILE_NAME = ".env.production";
    break;
  case "staging":
    ENV_FILE_NAME = ".env.staging";
    break;
  case "test":
    ENV_FILE_NAME = ".env.test";
    break;
  case "development":
  default:
    ENV_FILE_NAME = ".env";
    break;
}

try {
  dotenv.config({ path: process.cwd() + "/" + ENV_FILE_NAME });
} catch (e) {
  console.log("Warning: Could not load .env file");
}

// CORS configuration
const ADMIN_CORS = process.env.ADMIN_CORS || "http://localhost:7001,http://localhost:7000";
const STORE_CORS = process.env.STORE_CORS || "http://localhost:3000";
const DATABASE_URL = process.env.DATABASE_URL || "postgres://postgres:password@localhost/rebbies_store_db";

// Plugins configuration
const plugins = [
  `medusa-fulfillment-manual`,
  `medusa-payment-manual`,
  `medusa-file-local`,
  
  // Admin dashboard
  {
    resolve: "@medusajs/admin",
    options: {
      autoRebuild: true,
      develop: {
        open: process.env.OPEN_BROWSER !== "false",
      },
    },
  },
];

// Only add Paystack if keys are provided and not placeholders
if (process.env.PAYSTACK_SECRET_KEY && !process.env.PAYSTACK_SECRET_KEY.includes("your_paystack")) {
  plugins.push({
    resolve: `medusa-payment-paystack`,
    options: {
      secret_key: process.env.PAYSTACK_SECRET_KEY,
      public_key: process.env.PAYSTACK_PUBLIC_KEY,
    },
  });
  console.log("✅ Paystack payment plugin loaded");
} else {
  console.log("⚠️  Paystack keys not configured - using manual payment only");
}

// Modules configuration for v1
const modules = {
  // Use in-memory event bus for development (no Redis required)
  eventBus: {
    resolve: "@medusajs/event-bus-local",
  },
  
  // Use in-memory cache for development (no Redis required)
  cacheService: {
    resolve: "@medusajs/cache-inmemory",
  },
};

/** @type {import('@medusajs/medusa').ConfigModule["projectConfig"]} */
const projectConfig = {
  jwt_secret: process.env.JWT_SECRET || "supersecret",
  cookie_secret: process.env.COOKIE_SECRET || "supersecret",
  store_cors: STORE_CORS,
  database_url: DATABASE_URL,
  admin_cors: ADMIN_CORS,
  
  // Database SSL configuration for production
  database_extra:
    process.env.NODE_ENV !== "development"
      ? { ssl: { rejectUnauthorized: false } }
      : {},
};

/** @type {import('@medusajs/medusa').ConfigModule} */
module.exports = {
  projectConfig,
  plugins,
  modules,
};
